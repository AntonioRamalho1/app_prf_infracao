import streamlit as st
import pandas as pd
import pickle
import numpy as np
import gdown
import tempfile
import os
import joblib
import psutil

@st.cache_data
def get_km_range_from_pipeline(_pipeline):   # ‚Üê underline no nome
    try:
        coltrans = _pipeline.named_steps['prep']
        scaler   = coltrans.named_transformers_['scale_num']
        num_cols = coltrans.transformers_[0][2]
        idx      = num_cols.index('km_infracao')
        min_km   = int(scaler.data_min_[idx])
        max_km   = int(scaler.data_max_[idx])
        return min_km, max_km
    except Exception as e:
        st.warning(f"N√£o achei range no scaler: {e}")
        return 0, 10000

def add_cyclic(df: pd.DataFrame) -> pd.DataFrame:
    out = df.copy()
    out['hora_sin'] = np.sin(2*np.pi*out['hora_infracao']/24)
    out['hora_cos'] = np.cos(2*np.pi*out['hora_infracao']/24)
    out['mes_sin']  = np.sin(2*np.pi*out['mes']/12)
    out['mes_cos']  = np.cos(2*np.pi*out['mes']/12)
    out['dia_semana_sin'] = np.sin(2*np.pi*out['dia_semana']/7)
    out['dia_semana_cos'] = np.cos(2*np.pi*out['dia_semana']/7)
    return out.drop(columns=['hora_infracao','mes','dia_semana'])
    
# ==============================================
# üé® CONFIGURA√á√ïES INICIAIS E DESIGN DA P√ÅGINA
# ==============================================
st.set_page_config(
    page_title="Previsor de Infra√ß√µes PRF",
    page_icon="üöî",
    layout="centered",
    initial_sidebar_state="expanded"
)



# Custom CSS para melhorar a apar√™ncia
# Custom¬†CSS
st.markdown("""
<style>
/* ================== VARI√ÅVEIS DE COR ================== */
:root {
    --primary:   #FF5733; /* laranja vivo */
    --secondary: #C70039; /* vermelho escuro */
    --text-dark: #212121; /* quase preto */
    --text-light: #FFFFFF; /* branco */
}

/* ================== LAYOUT GERAL ================== */
.stApp {
    background-color: #f5f5f5;
    color: var(--text-dark);
    font-family: "Helvetica", sans-serif;
}

/* ================== T√çTULOS ================== */
h1 {
    color: var(--primary) !important;
    border-bottom: 2px solid var(--primary);
    padding-bottom: 10px;
}
h2 {
    color: var(--secondary) !important;
    margin-top: 1.5rem !important;
}

/* ================== SIDEBAR ================== */
[data-testid="stSidebar"] * {
    color: var(--text-light) !important;
}

/* ================== WIDGETS ================== */
label, .stSelectbox, .stSlider, .stNumberInput, .stTextInput {
    color: var(--text-dark) !important;
    font-weight: 500;
}

/* ================== BOT√ïES GERAIS ================== */
.stButton>button {
    background-color: var(--primary) !important;
    color: var(--text-light) !important;
    border: none;
    border-radius: 8px !important;
    padding: 10px 24px !important;
    margin: 0.5rem 0;
    font-weight: 600;
    transition: all 0.25s ease;
    box-shadow: 0 3px 5px rgba(0,0,0,0.15);
}
.stButton>button:hover {
    background-color: var(--secondary) !important;
    transform: translateY(-2px) scale(1.03);
    box-shadow: 0 6px 10px rgba(0,0,0,0.25);
}
.stButton>button:focus,
.stButton>button:active {
    outline: none;
    box-shadow: 0 0 0 3px rgba(199,0,57,0.4);
}
.stButton > button:disabled {
    background-color: var(--primary) !important;
    color: var(--text-light) !important;
    opacity: 0.6 !important;
    cursor: not-allowed;
}

/* ================== BOT√ÉO SUBMIT DO FORMUL√ÅRIO ================== */
button[data-testid="stBaseButton-secondaryFormSubmit"] {
    background-color: var(--primary) !important;
    color: white !important;
    font-weight: bold !important;
    font-size: 1.1rem !important;
    padding: 12px 28px !important;
    border-radius: 8px !important;
    border: 2px solid var(--primary) !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important;
}
button[data-testid="stBaseButton-secondaryFormSubmit"]:hover {
    background-color: var(--secondary) !important;
    color: white !important;
    transform: scale(1.05);
    box-shadow: 0 6px 12px rgba(0,0,0,0.3) !important;
}
button[data-testid="stBaseButton-secondaryFormSubmit"] * {
    color: white !important;
    opacity: 1 !important;
    font-weight: bold !important;
    visibility: visible !important;
}

/* ================== RADIO BUTTONS ================== */
.stRadio [class*="st-"] label {
    color: black !important;
    opacity: 1 !important;
    visibility: visible !important;
    font-weight: 500 !important;
}
div[role="radio"][aria-checked="true"] label {
    color: black !important;
    opacity: 1 !important;
    font-weight: bold !important;
}
div[role="radio"][aria-checked="false"] label {
    color: black !important;
    opacity: 1 !important;
}
.stRadio [role="radiogroup"] {
    gap: 1rem;
}
.stRadio [role="radio"] {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}
.stRadio label,
.stRadio div[role="radio"] > label > div {
    color: black !important;
    font-weight: 500;
}
.stRadio div[role="radio"] > label > div:first-child {
    background-color: white !important;
    border: 2px solid var(--primary) !important;
}
.stRadio div[role="radio"][aria-checked="true"] > label > div:first-child > div {
    background-color: var(--primary) !important;
}
.stRadio [data-testid="stMarkdownContainer"] p {
    color: black !important;
    opacity: 1 !important;
    font-weight: 500 !important;
    visibility: visible !important;
}

/* ================== MENSAGENS E RESULTADOS ================== */
.stAlert, .stMarkdown>div {
    color: var(--text-dark) !important;
    font-weight: 600;
    border-radius: 8px !important;
}
.result-container {
    background-color: var(--text-light);
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    margin: 1rem 0;
}
.stAlert[data-baseweb="notification"]:has(.stMarkdown) {
    background-color: #C8E6C9 !important;
    border: 1px solid #2E7D32 !important;
    color: #1B5E20 !important;
    font-weight: 600;
}
</style>
""", unsafe_allow_html=True)


# ==============================================
# Fun√ß√£o de exibi√ß√£o do cabe√ßalho
# ==============================================
def show_header():
    st.title("Previsor de Infra√ß√µes PRF")
    st.markdown("### Aplicativo para previs√£o de infra√ß√µes rodovi√°rias com base em dados hist√≥ricos da PRF.")
# ==============================================
# üì• CARREGAMENTO DE MODELO E DADOS
# ==============================================
# üì• CARREGAMENTO DE MODELO E DADOS
@st.cache_resource(max_entries=1)
def load_pipeline():
    try:
        # Novo ID do arquivo do Google Drive
        file_id = "1ek_Em7R8HEbjL9jRtTg8uB8fZmumVudg"
        url = f"https://drive.google.com/uc?id={file_id}"

        # Cria um caminho tempor√°rio adequado para Windows/Linux/Mac
        temp_dir = tempfile.gettempdir()
        output_path = os.path.join(temp_dir, "pipeline.pkl")

        gdown.download(url, output_path, quiet=False)

        with open(output_path, "rb") as f:
            obj = joblib.load(f)

        return obj['pipeline'], obj['base_cols']

    except Exception as e:
        st.error(f"Erro ao carregar o pipeline: {e}")
        return None, None

# ==============================================
# üë• INTERFACE DE ENTRADA DE DADOS
# ==============================================
# Modificando a interface de entrada de dados
# Modificando a interface de entrada de dados
def input_data_interface(km_range):
    st.markdown("### üìù Inserir Dados para Previs√£o")

    dados = {}
    min_km, max_km = km_range
    with st.form("input_form"):

        # ---------- CAMPOS PRINCIPAIS ----------

        dados['km_infracao'] = st.slider(
        "KM da infra√ß√£o",
        min_value=min_km,
        max_value=max_km,
        value=(min_km + max_km) // 2,
        step=1
        )
    
        dados['hora_infracao'] = st.selectbox(
            "Hora da infra√ß√£o",
            np.arange(0, 24),
            format_func=lambda x: f"{x:02d}:00"
        )

        dados['mes'] = st.selectbox(
            "M√™s da infra√ß√£o", np.arange(1, 13)
        )

        dias_semana = {
            'Segunda':0, 'Ter√ßa':1, 'Quarta':2,
            'Quinta':3, 'Sexta':4, 'S√°bado':5, 'Domingo':6
        }
        dados['dia_semana'] = dias_semana[
            st.selectbox("Dia da semana", list(dias_semana.keys()))
        ]

        dados['br_infracao'] = st.number_input(
            "N√∫mero da BR", min_value=0, max_value=9999,
            value=230, step=1, format="%d"
        )

        dados['feriado'] = 1 if st.selectbox(
            "Foi feriado?", ["N√£o", "Sim"], index=0
        ) == "Sim" else 0

        with st.expander("‚öôÔ∏è Op√ß√µes avan√ßadas (geralmente deixe padr√£o)", expanded=False):

            abordagem = st.radio("O ve√≠culo foi abordado pela PRF?", ["N√£o","Sim"], horizontal=True)
            dados['indicador_de_abordagem'] = 1 if abordagem == "Sim" else 0

            assinatura = st.radio("O condutor assinou o Auto de Infra√ß√£o?", ["N√£o","Sim"], horizontal=True)
            dados['assinatura_do_auto'] = 1 if assinatura == "Sim" else 0

            estrangeiro = st.radio("O ve√≠culo possui placa estrangeira?", ["N√£o","Sim"], horizontal=True)
            dados['indicador_veiculo_estrangeiro'] = 1 if estrangeiro == "Sim" else 0

            sentido = st.radio("Sentido do tr√°fego na via:", ["Decrescente (km ‚Üì)","Crescente (km ‚Üë)"], horizontal=True)
            dados['sentido_trafego'] = 0 if "Decrescente" in sentido else 1

        # ---------- BOT√ÉO SUBMIT ----------
        submitted = st.form_submit_button("üîÆ Realizar Previs√£o")

    return dados, submitted

# ==============================================
# üìä VISUALIZA√á√ÉO DE RESULTADOS
# ==============================================
# Modificando a parte onde a previs√£o √© feita
def show_results(pipeline, dados, base_cols):
    try:
        df = pd.DataFrame([dados])
        for col in base_cols:
            if col not in df.columns:
                df[col] = 0
        df = df[base_cols]

        pred = pipeline.predict(df)[0]
        st.success(f"### Infra√ß√£o prevista: **{pred}**")

        proba = pipeline.predict_proba(df)[0]
        top3 = (pd.Series(proba, index=pipeline.classes_)
                   .nlargest(3)
                   .reset_index()
                   .rename(columns={'index':'Infra√ß√£o',0:'Probabilidade'}))
        st.dataframe(top3, hide_index=True, use_container_width=True)

    except Exception as e:
        st.error(f"Erro ao gerar previs√£o: {e}")

# ==============================================
# üì§ UPLOAD DE ARQUIVO CSV
# ==============================================
def file_upload_section(modelo, X_full):
    st.markdown("### üì§ Carregar Arquivo CSV")
    
    uploaded_file = st.file_uploader(
        "Selecione um arquivo CSV com os dados para previs√£o",
        type=["csv"],
        accept_multiple_files=False
    )
    
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            
            # Verificar colunas
            if set(df.columns) != set(X_full.columns):
                missing = set(X_full.columns) - set(df.columns)
                extra = set(df.columns) - set(X_full.columns)
                error_msg = "Erro: As colunas do arquivo n√£o correspondem ao modelo."
                if missing:
                    error_msg += f"\n\nColunas faltantes: {', '.join(missing)}"
                if extra:
                    error_msg += f"\n\nColunas extras: {', '.join(extra)}"
                st.error(error_msg)
                return
            
            # Processar previs√µes
            with st.spinner("Processando arquivo..."):
                previsoes = modelo.predict(df)
                df_resultado = df.copy()
                df_resultado["Previs√£o"] = previsoes
                
                st.success(f"Previs√µes conclu√≠das para {len(df)} registros!")
                st.dataframe(df_resultado, use_container_width=True)
                
                # Op√ß√£o para download
                csv = df_resultado.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="Download dos Resultados",
                    data=csv,
                    file_name="resultados_previsao.csv",
                    mime="text/csv"
                )
                
        except Exception as e:
            st.error(f"Erro ao processar arquivo: {str(e)}")

# ==============================================
# ‚ÑπÔ∏è SE√á√ÉO DE INFORMA√á√ïES SOBRE O MODELO
# ==============================================
def model_info_section():
    st.sidebar.markdown("## ‚ÑπÔ∏è Sobre o Modelo")
    
    with st.sidebar.expander("üìö Como funciona", expanded=True):
        st.write("""
        Este modelo preditivo utiliza algoritmo **Random Forest** para classificar o tipo de infra√ß√£o mais prov√°vel 
        em rodovias federais com base em dados hist√≥ricos da PRF.
        
        **Funcionalidades:**
        - Previs√£o individual via formul√°rio
        - Processamento em lote via arquivo CSV
        - Visualiza√ß√£o detalhada das probabilidades
        """)
    
    with st.sidebar.expander("‚öôÔ∏è M√©tricas do Modelo", expanded=False):
        st.write("""
        **Desempenho M√©dio (5.1 Milh√µes de dados):**
        - Acur√°cia geral: 78,94%
        - Precis√£o m√©dia ponderada: 74,17%
        - Recall m√©dio ponderado: 78,94%
        - F1-score m√©dio ponderado: 72,79%
        
        **Vari√°veis mais importantes:**
        1. Velocidade do ve√≠culo
        2. Tipo de rodovia
        3. Hor√°rio do dia
        4. Condi√ß√µes clim√°ticas
        """)
    
    with st.sidebar.expander("‚ö†Ô∏è Limita√ß√µes", expanded=False):
        st.write("""
        - Baseado em dados hist√≥ricos (2024)
        - N√£o considera eventos at√≠picos
        - Precis√£o pode variar por regi√£o
        - Requer atualiza√ß√£o peri√≥dica
        """)
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Desenvolvido por:**\n\nAntonio Ramalho e Allan Victor - CDN")

# ==============================================
# üìå FUN√á√ÉO PRINCIPAL
# ==============================================
def print_memory_usage():
    process = psutil.Process(os.getpid())
    st.write(f"üß† Mem√≥ria usada: {process.memory_info().rss / 1024 ** 2:.2f} MB")

print_memory_usage()

def main():
    show_header()

    model_info_section()

    tab1, tab2 = st.tabs(["üîÆ Previs√£o Individual", "üìÅ Processar Arquivo"])

    with tab1:
        km_range = (0, 1000)  # Valores padr√£o
        dados, submitted = input_data_interface(km_range)
        if submitted:
            # Carrega o modelo apenas se necess√°rio
            pipeline, base_cols = load_pipeline()
            if pipeline is None:
                return
            show_results(pipeline, dados, base_cols)

    with tab2:
        uploaded = st.file_uploader("CSV para previs√£o", type="csv")
        if uploaded:
            pipeline, base_cols = load_pipeline()
            if pipeline is None:
                return
            df = pd.read_csv(uploaded)
            if set(df.columns) != set(base_cols):
                st.error("Colunas do CSV n√£o batem com o modelo.")
            else:
                prev = pipeline.predict(df)
                df['Previs√£o'] = prev
                st.dataframe(df, use_container_width=True)
                st.download_button(...)

    st.markdown("---")
    st.caption("Dados PRF¬†2024 ‚Ä¢ Antonio¬†Ramalho & Allan¬†Victor")

if __name__ == "__main__":
    main()
